#: import MDNavigationLayout kivymd.uix.navigationdrawer.MDNavigationLayout
#: import Animation kivy.animation.Animation
#: import cm kivy.metrics.cm
#: import dp kivy.metrics.dp
#: import ScrollEffect kivy.effects.scroll.ScrollEffect
#: import Clipboard kivy.core.clipboard.Clipboard
#: import MySwitch MySwitch.MySwitch



<TooltipMDIconButton@MDIconButton+MDTooltip>:
    tooltip_bg_color: '#262626ff'
    tooltip_text_color: app.theme_cls.opposite_bg_light[:3] + [0.75]



<NavigationDrawerItem@MDNavigationDrawerItem>:
    on_release: self.parent.parent.parent.set_state('close')
    icon_color: app.theme_cls.primary_light
    text_color: app.theme_cls.opposite_bg_light if app.theme_cls.theme_style == "Light" else app.theme_cls.opposite_bg_dark
    selected_color: app.theme_cls.primary_light


<MyNavigationDrawerItem@MDNavigationDrawer>:
    # anchor: 'right'
    orientation: 'vertical'
    MDNavigationDrawerMenu:
        radius: (0, 16, 16, 0)
        effect_cls: ScrollEffect
        MDNavigationDrawerHeader:
            title: "Welcome"
            # text: "Location alarm"
            spacing: "4dp"
            padding: "12dp" , 0, 0, "56dp"
        #MDNavigationDrawerLabel:
        #    text: ''
        NavigationDrawerItem:
            icon: 'map-marker-star'
            text: 'Saved locations'
            on_release:
                app.goto_screen('saved_locations')
        NavigationDrawerItem:
            icon: 'cog'
            text: 'Customise'
            on_release:
                app.goto_screen('settings')

        MDNavigationDrawerDivider:
        MDNavigationDrawerLabel:
            text: 'Developer'
        NavigationDrawerItem:
            icon: "hand-heart"
            text: "Support developer"
            on_release: app.toast(fun=True, id_='1')
        NavigationDrawerItem:
            icon: "send"
            text: "Send feedback"
            on_release: app.send_feedback()

        MDNavigationDrawerDivider:
        MDNavigationDrawerLabel:
            text: 'Other'
        NavigationDrawerItem:
            icon: 'alert'
            text: 'Error Log'
            on_release: app.toast(fun=True, id_='3')

        # MDNavigationDrawerDivider:
        NavigationDrawerItem:
            icon: 'help-circle'
            text: 'Help'
            on_release: app.toast(fun=True, id_='4')

    MDBoxLayout:
        size_hint_y: None
        orientation: 'vertical'
        height: self.minimum_height
        padding: 0, '10dp', 0, 0
        canvas.before:
            Color:
                rgba: 0.4, 0.4, 0.4, 0.5
            Line:
                points: (self.x, self.top), (self.right, self.top)
        MDLabel:
            size_hint_y: None
            height: self.texture_size[1]
            text: app.version
            disabled: True
            halign: 'center'



<MyTopAppBar@MDTopAppBar>:
    md_bg_color: app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '00'
    # title: "Location Alarm"
    # right_action_items: [["dots-vertical", lambda x: self.parent.parent.parent.parent.parent.parent.parent.ids['nav_bar'].set_state('open')]]



<CustomExpansionPanelThreeLineListItem>:
    bg_color: 0.2, 0.2, 0.2, 0.6
    radius: dp(15)
    font_style: 'H6'
    divider_color: app.theme_cls.bg_normal



<ToolBar@MDNavigationLayout>:
    MDScreenManager:
        MDScreen:
            MDTopAppBar:
                id: top_app_bar
                md_bg_color: app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '24'
                elevation: 0
                pos_hint: {"top": 1}
                title: 'Location Alarm'
                specific_text_color: app.theme_cls.opposite_bg_dark
                right_action_items: [["dots-vertical", lambda x: nav_bar.set_state("open")]]

    MyNavigationDrawerItem:
        swipe_edge_width: '25dp'
        id: nav_bar



<MyToggleIconButton@MDIconButton>:
    option: 's'
    is_active: False
    inactive_color: '#555555'
    active_color: app.theme_cls.primary_color
    size_hint: None, None
    size: self.parent.width // 7, self.parent.height

    theme_icon_color: "Custom"
    icon_color: self.active_color if self.is_active else self.inactive_color
    icon: f'alpha-{self.option}-circle' if self.is_active else f'alpha-{self.option}'

    on_release:
        self.is_active = not self.is_active


<WeeksToggleButtons>:
    size_hint: None, None
    width: self.parent.parent.width
    height: self.minimum_height
    pos_hint: {'center_x': 0.5}
    # adaptive_width: True

    MyToggleIconButton:
        id: sun
        option: 's'
        inactive_color: '#cc5555'
        # active_color: '#ff3333'
    MyToggleIconButton:
        id: mon
        option: 'm'
    MyToggleIconButton:
        id: tue
        option: 't'
    MyToggleIconButton:
        id: wed
        option: 'w'
    MyToggleIconButton:
        id: thu
        option: 't'
    MyToggleIconButton:
        id: fri
        option: 'f'
    MyToggleIconButton:
        id: sat
        option: 's'



<EssentialContent>:
    size_hint_y: None
    spacing: dp(25)
    padding: 0, 0, 0, 0
    height: self.minimum_height
    orientation: 'vertical'
    WeeksToggleButtons:
        id: week_buttons

    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        spacing: 50
        padding: 0, 0, dp(25), 0
        MDIcon:
            icon: 'bell-ring-outline'
            pos_hint: {'center_y': 0.5}
        MDLabel:
            text: 'Sound alarm'
        MySwitch:
            # size_hint: None, None
            # size: self.size
            icon_active: "check"
            pos_hint: {'y': -0.15}

    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        spacing: 50
        padding: 0, 0, dp(25), 0
        MDIcon:
            icon: 'vibrate'
            pos_hint: {'center_y': 0.5}
        MDLabel:
            text: 'Vibrate'
        MySwitch:
            # size_hint: None, None
            # size: self.size
            icon_active: "check"
            pos_hint: {'y': -0.15}

    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        spacing: 50
        MDIcon:
            pos_hint: {'center_y': 0.5}
            icon: 'radius-outline'
        MDLabel:
            text: 'Alarm radius'
        BoxLayout:
            spacing: 5
            MDTextField:
                size_hint_y: None
                height: '32dp'
                id: dist_inp
                # mode: 'fill'
                text: '250'
                halign: 'right'
                pos_hint: {'center_y': 0.5}
                on_text:
                    app.validate_alarm_distance(root, self.text, m_km_button.text.strip())
                on_focus:
                    app.validate_alarm_distance(root, self.text, m_km_button.text.strip(), self.focus)

            MDTextButton:
                id: m_km_button
                text: 'm    '
                on_release:
                    root.open_menu()
                on_text:
                    app.validate_alarm_distance(root, dist_inp.text, self.text.strip())




<AlarmExpansionContent>:
    id: main_parent
    adaptive_height: True
    padding: 15
    canvas.before:
        Color:
            rgba: 0.2, 0.2, 0.2, 0.6
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: 0, 0, dp(16), dp(16)
        # Color:
        #     rgb: 0.05, 0.05, 0.05
        # Line:
        #     points: (self.x, self.top), (self.right, self.top)
    BoxLayout:
        size_hint_y: None
        padding: dp(25)
        spacing: dp(25)
        height: self.minimum_height
        orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: self.minimum_height
            padding: dp(25), -dp(25), dp(25), 0
            spacing: 50
            MDLabel:
                text: 'Active state'
                halign: 'right'
            MySwitch:
                id: is_active
                icon_active: 'check'
                pos_hint: {'y': -0.15}
        EssentialContent:
            id: ess_content
        MDRectangleFlatIconButton:
            icon: 'delete'
            text: 'Remove'
            pos_hint: {'right': 1, 'y': 0.05}
            text_color: '#ff3333'
            icon_color: self.text_color
            line_color: self.text_color
            on_release:
                root.remove()




<AlarmsTab>:
    MDBoxLayout:
        orientation: 'vertical'
        # MyTopAppBar:
        #     id: top_app_bar
        #     md_bg_color: app.theme_cls.bg_normal
        #     text_color: app.theme_cls.bg_normal
        MDBoxLayout:
            size_hint_y: None
            height: dp(64)
        ScrollView:
            id: scroll_view
            on_scroll_start: root.scroll_movement(self.scroll_y)
            on_scroll_move: root.scroll_movement(self.scroll_y)
            on_scroll_stop: root.scroll_movement(self.scroll_y)
            # always_overscroll: False
            effect_cls: ScrollEffect
            scroll_type: ['bars', 'content']
            canvas.before:
                Color:
                    rgba: app.color_converter(app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '40')
                Rectangle:
                    size: self.size[0], self.size[1]/2
                    pos: self.x, self.top / 2
                Color:
                    rgba: app.color_converter(app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '25')
                Rectangle:
                    size: self.size[0], self.size[1]/2
                    pos: self.pos
                Color:
                    rgba: app.theme_cls.bg_normal  # whatever you do keep alpha as 1
                RoundedRectangle:
                    size: self.size
                    radius: dp(16),
                    pos: self.pos
            BoxLayout:
                padding: dp(15), dp(10), dp(15), dp(18)
                spacing: dp(20)
                size_hint_y: None
                orientation: 'vertical'
                id: container
                height: self.minimum_height
    # ToolBar:



<GoogleMapsTab>:
    canvas.before:
        Color:
            rgba: app.color_converter(app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '40')
        Rectangle:
            size: self.size[0], self.size[1]/2 - dp(64)  # Todo_: This code is differs from active_alarms tab and does
                                                            #    the same (it seems), but not tested tho
            pos: self.x, self.top / 2
        Color:
            rgba: app.color_converter(app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '25')
        Rectangle:
            size: self.size[0], self.size[1]/2
            pos: self.pos
        Color:
            rgba: app.theme_cls.bg_normal  # whatever you do keep alpha as 1
        RoundedRectangle:
            size: self.width, self.height - dp(64)
            radius: dp(16),
            pos: self.pos
    MDBoxLayout:
        orientation: 'vertical'
        MDBoxLayout:
            size_hint_y: None
            height: dp(64)
        MDBoxLayout:
            MDScrollView:
                effect_cls: ScrollEffect
                MDBoxLayout:
                    orientation: 'vertical'
                    size_hint_y: None
                    height: self.minimum_height
                    MDBoxLayout:
                        padding: '24dp'
                        spacing: '15dp'
                        orientation: 'vertical'
                        size_hint: 1, None
                        height: self.minimum_height
                        MyLabel:
                            id: co_ords
                            text: 'Getting co-ordinates...'
                            halign: 'left'
                        MyLabel:
                            id: location
                            text: 'Getting location...'
                            halign: 'left'
                        MyLabel:
                            id: speed
                            text: 'Getting speed...'
                            halign: 'left'
                        MyLabel:
                            id: heading
                            text: 'Getting heading...'
                            halign: 'left'
            TooltipMDIconButton:
                tooltip_text: 'Copy'
                icon: 'content-copy'
                pos_hint: {'right': 1, 'top': 1}
        MDBoxLayout:
            orientation: 'vertical'
            size_hint_y: None
            height: self.minimum_height
            spacing: '24dp'
            padding: 0, 0, 0, '25dp'
            MDRaisedButton:
                text: 'open "Google Maps"'
                pos_hint: {'center_x': 0.5}  # 'center_y': 0.5}
                on_release:
                    app.open_url('https://maps.google.com/')
                    # app.toast(fun=True, id_='5')
            MDRectangleFlatIconButton:
                icon: 'hand-heart'
                text: 'Support developer'
                pos_hint: {'center_x': 0.5}  # 'center_y': 0.7}
                on_release: app.toast('Thank you from bottom my heart but this is not working for now')





<HomeScreen>:
    BoxLayout:
        orientation: 'vertical'
        MDBottomNavigation:
            id: bottom_navigation
            # panel_color: 0.1, 0.1, 0.1, 0.8
            panel_color: app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '25'
            selected_color_background: app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '7f'
            text_color_active: "lightgrey"

            MDBottomNavigationItem:
                name: 'screen 1'
                text: 'Active alarms'
                icon: 'timer-marker-outline'
                on_tab_press:
                    root.tab_press(self)
                    alarm_tab.on__enter()

                AlarmsTab:
                    id: alarm_tab

            MDBottomNavigationItem:
                name: 'screen 2'
                text: 'Where am I?'
                icon: 'map-marker-radius'
                on_tab_press:
                    root.tab_press(self)
                    alarm_tab.on__leave()
                GoogleMapsTab:

            # MDBottomNavigationItem:
            #     name: 'screen 2'
            #     text: 'Google maps'
            #     icon: 'google-maps'
            #     on_tab_press:
            #         root.tab_press(self)

            #     GoogleMapsTab:

            # MDBottomNavigationItem:
            #     name: 'screen 3'
            #     text: 'Distance'
            #     icon: 'map-marker-distance'
            #     on_tab_press:
            #         root.tab_press(self)
            #     MDLabel:
            #         text: 'Distance'
            #         halign: 'center'
            #         on_touch_down:
            #             print(bottom_navigation.size[1])

    MDFloatingActionButton:
        id: spd_dial
        icon: 'plus'
        md_bg_color: app.theme_cls.colors[app.theme_cls.primary_palette]['900']
        pos_hint: {'right': 0.95, 'y': dp(100) / root.height}
        on_release: root.add_content()

        _soft_shadow_size: self.soft_shadow_size
        _soft_shadow_pos: self.soft_shadow_pos
        _hard_shadow_texture: self.hard_shadow_texture
        _hard_shadow_size: self.hard_shadow_size
        _hard_shadow_pos: self.hard_shadow_pos

    ToolBar:
        id: top_app_bar



<SettingsScreen>:
    MDLabel:
        text: 'Settings are on the way, will arrive soon...'
        halign: 'center'





<SavedLocationsScreen>:
    MDBoxLayout:
        padding: dp(8)
        MDScrollView:
            MDBoxLayout:
                orientation: 'vertical'
                size_hint_y: None
                id: container
                height: self.minimum_height
                MDRectangleFlatIconButton:
                    icon: 'plus'
                    text: 'Add'
                    font_size: '32dp'
                    pos_hint: {'center_x': 0.5}
                    on_release: app.goto_screen('new_location')
    MDLabel:
        text: 'Saved locations will appear here'
        halign: 'center'



<AddNewLocationScreen>:
    MDBoxLayout:
        orientation: 'vertical'
        padding: '8dp'
        spacing: '18dp'
        MDLabel:
            size_hint_y: None
            height: self.texture_size[1]
            text: 'Add reminder'
            font_style: 'H5'
            pos_hint: {'top': 0.98}
            valign: 'top'
        ScrollView:
            MDBoxLayout:
                orientation: 'vertical'
                size_hint_y: None
                height: self.minimum_height
                spacing: '24dp'
                padding: '10dp'
                MDBoxLayout:
                    size_hint_y: None
                    height: self.minimum_height
                    spacing: dp(10)
                    MDTextField:
                        hint_text: 'GPS co-ords'
                        id: cords_in
                        on_focus: root.validate_gps_cords()
                        helper_text: 'Invalid GPS co-ordinates'
                        helper_text_mode: 'on_error'
                        # max_text_length: 30
                    TooltipMDIconButton:
                        text: 'Paste'
                        tooltip_text: 'Paste from clipboard'
                        icon: 'content-paste'
                        pos_hint: {'right': 1}
                        on_release:
                            cords_in.text = Clipboard.paste()
                            root.validate_gps_cords()
                    TooltipMDIconButton:
                        icon: 'map-marker'
                        tooltip_text: 'Current GPS location'
                        pos_hint: {'right': 1}
                        on_release:
                            cords_in.text = "This feature is still in development"
                            root.validate_gps_cords()
                MDBoxLayout:
                    size_hint_y: None
                    height: self.minimum_height
                    spacing: dp(10)
                    padding: 0, 0, 0, dp(32)
                    MDTextField:
                        hint_text: 'Location name'
                    MDRectangleFlatButton:
                        pos_hint: {'center_y':0.5}
                        text: 'Get name'
                        on_release: app.toast(fun=True, id_='6')
                EssentialContent:
                    id: ess_content
                    spacing: dp(32)
                MDBoxLayout:
                    size_hint_y: None
                    height: self.minimum_height
                    padding: 0, '16dp', 0, '16dp'
                    MDTextButton:
                        text: 'Song.mp3'
                        on_release: app.toast(fun=True, id_='7')
                MDRectangleFlatIconButton:
                    text: 'Add'
                    icon: 'plus'
                    pos_hint: {'center_x': 0.5}
                    on_release: app.toast(fun=True, id_='8')



<MyLabel@MDLabel>:
    size_hint_y: None
    height: self.texture_size[1]
    halign: 'center'

<FirstInfoScreen>:
    MDScreen:
        ScrollView:
            BoxLayout:
                size_hint_y: None
                height: self.minimum_height
                orientation: 'vertical'
                padding: 25
                MyLabel:
                    text: 'DISCLAIMER'
                    font_style: 'H4'
                MyLabel:
                    text: '\nLast updated March 2, 2024\n'
                # MyLabel:
                #     text: "Read this carefully"
                MyLabel:
                    text: '•Before starting:'
                    font_style: 'H5'
                    halign: 'left'
                MyLabel:
                    pos_hint: {'center_x': 0.55}
                    size_hint_x: 0.92
                    halign: 'left'
                    text: "\n      This app is still under development, you may experience frequent crashes, glitches or bugs. Don't worry!, with your feedback these can be fixed, So please consider giving feedback.\n\n"
                    # text: '\n      The information provided by YoutubeVideoDownloader ("we," "us," or "our") on our mobile application is for general informational purposes. All information on our mobile application is provided in good faith, however we make no representation or warranty of any kind, express or implied, regarding the accuracy, adequacy, validity, reliability, availability, or completeness of any information on our mobile application. UNDER NO CIRCUMSTANCE SHALL WE HAVE ANY LIABILITY TO YOU FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF OUR MOBILE APPLICATION OR RELIANCE ON ANY INFORMATION PROVIDED ON OUR MOBILE APPLICATION. YOUR USE OF OUR MOBILE APPLICATION AND YOUR RELIANCE ON ANY INFORMATION ON OUR MOBILE APPLICATION IS SOLELY AT YOUR OWN RISK.\n\n'
                MyLabel:
                    text: '•Your Data:'
                    font_style: 'H5'
                    halign: 'left'
                MyLabel:
                    pos_hint: {'center_x': 0.55}
                    size_hint_x: 0.92
                    halign: 'left'
                    text: "\n      We respect your privacy, our app DO NOT collect, store* or process any kind of information except the feedback provided by you. Your feedback is kept only between us and you (end user), we do not share your information with any third parties. IN-CASE OF LOSS OR DAMAGE OF YOU INFO UNDER ANY CIRCUMSTANCE IS ASSUMED SOLELY BY YOURS\n\n\n      *Storing doesn't include \"Error log\", this file is created when the app is about to crash. This file contains useful information about error.\n\nWhich includes\n  1.  Time error happened\n  2. Your device architecture and\n  3. Actual error info\n\n     We use these information to re-create bug and try to eliminate it\n\n"
                    # text: '\n      Our mobile application may contain (or you may be sent through our mobile application) links to other websites or content belonging to or originating from third parties (i.e; Youtube). Such external links are not investigated, monitored, or checked for accuracy, adequacy, validity, reliability, availability, or completeness by us. WE DO NOT WARRANT, ENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR THE ACCURACY OR RELIABILITY OF ANY INFORMATION OFFERED BY THIRD-PARTY WEBSITES (here Youtube only) LINKED THROUGH THE SITE. WE WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING ANY TRANSACTION BETWEEN YOU AND YOUTUBE PROVIDERS OF PRODUCTS OR SERVICES.\n\n'
                MyLabel:
                    text: '•Message from developer:'
                    font_style: 'H5'
                    halign: 'left'
                MyLabel:
                    pos_hint: {'center_x': 0.55}
                    size_hint_x: 0.92
                    halign: 'left'
                    text: "\n      Thank you for installing this app. Remember you are \'alpha\' tester for this app, currently NOTHING works at all, you have to look at UI/UX (User Interface -> how ease it is to us this app and how it visually appealing look wise) and give feedback is there any changes needed or any new additions/features required,  Your opinion matters, I love to hear your feedback. See you in the feedback section, Happy hunting bugs ;)\n\n"
                    # text: '\n      Downloading the copyrighted video/audio is illegal we were not responsible for your downloads!. Download at your risk\n'
                # MyLabel:
                #     halign: 'left'
                #     font_style: 'Caption'
                #     text: '*By pressing Continue you agreeing to the above conditions\n'


                MDRaisedButton:
                    text: 'Continue'
                    on_release: root.agree()
                    pos_hint: {'center_x': 0.5}
                    size_hint: 0.6, None


<LoadingScreen>:
    FloatLayout:
        MDSpinner:
            size_hint: None, None
            size: dp(80), dp(80)
            pos_hint: {'center_x': 0.5, 'center_y': 0.5}
        MyLabel:
            id: label
            halign: 'center'
            pos_hint: {'top': 0.5 - (dp(50) / root.height), 'center_x': 0.5}



<PasswordInputScreen>:
    canvas.before:
        Color:
            rgba: 0.1, 0.1, 0.1, 0.2
        Rectangle:
            size: self.size
            pos: self.pos
    MyLabel:
        text: 'Enter new password'
        font_size: dp(32)
        pos_hint: {'top': 0.9}

    MDTextField:
        id: password
        size_hint: 0.8, None
        icon_left: 'key'
        pos_hint: {'center_x': 0.5, 'center_y': 0.65}
        hint_text: 'Enter password'
        mode: 'rectangle'
        max_text_length: 16
        on_focus:
            help.icon_color = self.line_color_focus if self.focus else self.line_color_normal
        on_text:
            root.key_stroke(self, confirm_password, self.text)
            proceed.disabled = False if 4 <= len(self.text) <= 16 and self.text == confirm_password.text else True


    MDIconButton:
        id: help
        icon: "help-circle-outline"
        pos_hint: {"center_y": .65}
        pos: password.right - self.width + dp(8), 0
        theme_text_color: 'Custom'
        icon_color: password.line_color_normal

    MDTextField:
        id: confirm_password
        size_hint: 0.8, None
        icon_left: 'key'
        pos_hint: {'center_x': 0.5, 'center_y': 0.5}
        hint_text: 'Confirm Password'
        password: True
        mode: 'rectangle'
        on_focus:
            eye.icon_color = self.line_color_focus if self.focus else self.line_color_normal
        on_text:
            root.key_stroke(self, password, self.text)
            proceed.disabled = False if 4 <= len(self.text) <= 16 and self.text == password.text else True

    MDIconButton:
        id: eye
        icon: "eye"
        pos_hint: {"center_y": .5}
        pos: confirm_password.right - self.width + dp(8), 0
        theme_text_color: 'Custom'
        icon_color: confirm_password.line_color_normal
        on_release:
            self.icon = "eye" if self.icon == "eye-off" else "eye-off"
            confirm_password.password = False if confirm_password.password is True else True

    MDBoxLayout:
        size_hint: 1, None
        height: self.minimum_height
        pos_hint: {'x': confirm_password.x / root.width, 'top': (confirm_password.y - dp(20)) / root.height}
        MDCheckbox:
            id: check_box
            active: True
            inactive_color: app.theme_cls.primary_color
            size_hint: None, None
            size: dp(24), dp(24)
            pos_hint: {'center_x': 0.5}

        MDLabel:
            text: 'Remember me'
            halign: 'left'

    MDFillRoundFlatIconButton:
        id: proceed
        disabled: True
        text: 'Continue'
        icon: 'arrow-right'
        pos_hint: {'center_x': 0.5, 'y': 0.1}
        on_release:
            root.proceed()

    MDTextButton:
        pos_hint: {'right': 0.96}
        on_release:
            root.check_data_file()
        pos: self.x, dp(10)
        markup: True
        text: '[color=3333ff][u]Recover data[/u][/color]'



<PasswordLoginScreen>:
    canvas.before:
        Color:
            rgba: 0.1, 0.1, 0.1, 0.2
        Rectangle:
            size: self.size
            pos: self.pos
    MyLabel:
        text: 'Enter your password'
        font_size: dp(32)
        pos_hint: {'top': 0.9}

    MDTextField:
        id: password
        size_hint: 0.8, None
        icon_left: 'key'
        pos_hint: {'center_x': 0.5, 'center_y': 0.65}
        hint_text: 'Enter password'
        mode: 'rectangle'
        max_text_length: 16
        on_focus:
            help.icon_color = self.line_color_focus if self.focus else self.line_color_normal
        on_text:
            proceed.disabled = not root.is_pass_valid()

    MDBoxLayout:
        size_hint: 1, None
        height: self.minimum_height
        pos_hint: {'x': password.x / root.width, 'top': (password.y - dp(20)) / root.height}
        MDCheckbox:
            active: True
            inactive_color: app.theme_cls.primary_color
            size_hint: None, None
            size: dp(24), dp(24)
            pos_hint: {'center_x': 0.5}

        MDLabel:
            text: 'Remember me'
            halign: 'left'

    MDFillRoundFlatIconButton:
        id: proceed
        disabled: True
        text: 'Continue'
        icon: 'arrow-right'
        pos_hint: {'center_x': 0.5, 'y': 0.1}
        on_release:
            root.enter_button()

    MDTextButton:
        pos_hint: {'right': 0.96}
        on_release:
            root.forgot_password()
        pos: self.x, dp(10)
        markup: True
        text: '[color=3333ff][u]Forgot password[/u][/color]'

#: import MDNavigationLayout kivymd.uix.navigationdrawer.MDNavigationLayout
#: import Animation kivy.animation.Animation
#: import cm kivy.metrics.cm
#: import dp kivy.metrics.dp
#: import ScrollEffect kivy.effects.scroll.ScrollEffect
#: import Clipboard kivy.core.clipboard.Clipboard
#: import MySwitch CustomElements.MySwitch
#: import LagRectangleFlatButton CustomElements.LagRectangleFlatButton



<TooltipMDIconButton@MDIconButton+MDTooltip>:
    tooltip_bg_color: '#262626ff'
    tooltip_text_color: app.theme_cls.opposite_bg_light[:3] + [0.75]



<NavigationDrawerItem@MDNavigationDrawerItem>:
    on_release: self.parent.parent.parent.set_state('close')
    icon_color: app.theme_cls.primary_light
    text_color: app.theme_cls.opposite_bg_light if app.theme_cls.theme_style == "Light" else app.theme_cls.opposite_bg_dark
    selected_color: app.theme_cls.primary_light


<MyNavigationDrawerItem@MDNavigationDrawer>:
    # anchor: 'right'
    orientation: 'vertical'
    MDNavigationDrawerMenu:
        radius: (0, 16, 16, 0)
        effect_cls: ScrollEffect
        MDNavigationDrawerHeader:
            title: "Welcome"
            # text: "Location alarm"
            spacing: "4dp"
            padding: "12dp" , 0, 0, "56dp"
        #MDNavigationDrawerLabel:
        #    text: ''
        NavigationDrawerItem:
            icon: 'map-marker-star'
            text: 'Saved locations'
            on_release:
                app.goto_screen('saved_locations')
        NavigationDrawerItem:
            icon: 'cog'
            text: 'Customise'
            on_release:
                app.goto_screen('settings')

        MDNavigationDrawerDivider:
        MDNavigationDrawerLabel:
            text: 'Developer'
        NavigationDrawerItem:
            icon: "hand-heart"
            text: "Support developer"
            on_release: app.toast(fun=True, id_='1')
        NavigationDrawerItem:
            icon: "send"
            text: "Send feedback"
            on_release: app.send_feedback()

        MDNavigationDrawerDivider:
        MDNavigationDrawerLabel:
            text: 'Other'
        NavigationDrawerItem:
            icon: 'alert'
            text: 'Error Log'
            on_release: app.toast(fun=True, id_='3')

        # MDNavigationDrawerDivider:
        NavigationDrawerItem:
            icon: 'help-circle'
            text: 'Help'
            on_release: app.toast(fun=True, id_='4')

    MDBoxLayout:
        size_hint_y: None
        orientation: 'vertical'
        height: self.minimum_height
        padding: 0, '10dp', 0, 0
        canvas.before:
            Color:
                rgba: 0.4, 0.4, 0.4, 0.5
            Line:
                points: (self.x, self.top), (self.right, self.top)
        MDLabel:
            size_hint_y: None
            height: self.texture_size[1]
            text: app.version
            disabled: True
            halign: 'center'



<MyTopAppBar@MDTopAppBar>:
    md_bg_color: app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '00'
    # title: "Location Alarm"
    # right_action_items: [["dots-vertical", lambda x: self.parent.parent.parent.parent.parent.parent.parent.ids['nav_bar'].set_state('open')]]




<MyLabel@MDLabel>:
    size_hint_y: None
    height: self.texture_size[1]
    halign: 'justify'



<TextInputDialogContent>:
    orientation: 'vertical'
    spacing: '12dp'
    size_hint_y: None
    MDTextField:
        hint_text: 'Short name'
        id: text_field



<CustomExpansionPanelThreeLineListItem>:
    bg_color: 0.2, 0.2, 0.2, 0.6
    radius: dp(15)
    font_style: 'H6'
    divider_color: app.theme_cls.bg_normal



<ToolBar@MDNavigationLayout>:
    MDScreenManager:
        MDScreen:
            MDTopAppBar:
                id: top_app_bar
                md_bg_color: app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '24'
                elevation: 0
                pos_hint: {"top": 1}
                title: 'Location Alarm'
                specific_text_color: app.theme_cls.opposite_bg_dark
                right_action_items: [["dots-vertical", lambda x: nav_bar.set_state("open")]]

    MyNavigationDrawerItem:
        swipe_edge_width: '25dp'
        id: nav_bar



<MyToggleIconButton@MDIconButton>:
    option: 's'
    is_active: False
    inactive_color: '#555555'
    active_color: app.theme_cls.primary_color
    size_hint: None, None
    size: self.parent.width // 7, self.parent.height

    theme_icon_color: "Custom"
    icon_color: self.active_color if self.is_active else self.inactive_color
    icon: f'alpha-{self.option}-circle' if self.is_active else f'alpha-{self.option}'

    on_release:
        self.is_active = not self.is_active


<WeeksToggleButtons>:
    size_hint: None, None
    width: self.parent.parent.width
    height: self.minimum_height
    pos_hint: {'center_x': 0.5}
    # adaptive_width: True

    MyToggleIconButton:
        id: sun
        option: 's'
        inactive_color: '#cc5555'
        # active_color: '#ff3333'
    MyToggleIconButton:
        id: mon
        option: 'm'
    MyToggleIconButton:
        id: tue
        option: 't'
    MyToggleIconButton:
        id: wed
        option: 'w'
    MyToggleIconButton:
        id: thu
        option: 't'
    MyToggleIconButton:
        id: fri
        option: 'f'
    MyToggleIconButton:
        id: sat
        option: 's'



<EssentialContent>:
    size_hint_y: None
    spacing: dp(25)
    padding: 0, 0, 0, 0
    height: self.minimum_height
    orientation: 'vertical'
    WeeksToggleButtons:
        id: week_buttons

    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        spacing: 50
        padding: 0, 0, dp(25), 0
        MDIcon:
            icon: 'bell-ring-outline'
            pos_hint: {'center_y': 0.5}
        MDLabel:
            text: 'Sound alarm'
        MySwitch:
            # size_hint: None, None
            # size: self.size
            icon_active: "check"
            pos_hint: {'y': -0.15}

    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        spacing: 50
        padding: 0, 0, dp(25), 0
        MDIcon:
            icon: 'vibrate'
            pos_hint: {'center_y': 0.5}
        MDLabel:
            text: 'Vibrate'
        MySwitch:
            # size_hint: None, None
            # size: self.size
            icon_active: "check"
            pos_hint: {'y': -0.15}

    BoxLayout:
        size_hint_y: None
        height: self.minimum_height
        spacing: 50
        MDIcon:
            pos_hint: {'center_y': 0.5}
            icon: 'radius-outline'
        MDLabel:
            text: 'Alarm radius'
        BoxLayout:
            spacing: 5
            MDTextField:
                size_hint_y: None
                height: '32dp'
                id: dist_inp
                # mode: 'fill'
                text: '250'
                halign: 'right'
                pos_hint: {'center_y': 0.5}
                on_text:
                    app.validate_alarm_distance(root, self.text, m_km_button.text.strip())
                on_focus:
                    app.validate_alarm_distance(root, self.text, m_km_button.text.strip(), self.focus)

            MDTextButton:
                id: m_km_button
                text: 'm    '
                on_release:
                    root.open_menu()
                on_text:
                    app.validate_alarm_distance(root, dist_inp.text, self.text.strip())




<AlarmExpansionContent>:
    id: main_parent
    adaptive_height: True
    padding: 15
    # on_parent:
    #     if self.parent is not None: self.parent.update_height()
    on_height:
        if self.parent is not None: self.parent.update_height()

    canvas.before:
        Color:
            rgba: 0.2, 0.2, 0.2, 0.6
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: 0, 0, dp(16), dp(16)
        # Color:
        #     rgb: 0.05, 0.05, 0.05
        # Line:
        #     points: (self.x, self.top), (self.right, self.top)
    BoxLayout:
        size_hint_y: None
        size_hint_x: None
        width: self.parent.width
        padding: dp(25)
        spacing: dp(25)
        height: self.minimum_height
        orientation: 'vertical'
        MyLabel:
            padding: 0, 0, dp(20), dp(25)
            id: full_address
            size_hint: 1, None
            default_width: root.width
            text: ''
            height: self.height
        BoxLayout:
            size_hint_y: None
            height: self.minimum_height
            padding: dp(25), -dp(25), dp(25), 0
            spacing: 50
            MDLabel:
                text: 'Active state'
                halign: 'right'
            MySwitch:
                id: is_active
                icon_active: 'check'
                pos_hint: {'y': -0.15}
        EssentialContent:
            id: ess_content
        MDRectangleFlatIconButton:
            icon: 'delete'
            text: 'Remove'
            pos_hint: {'right': 1, 'y': 0.05}
            text_color: '#ff3333'
            icon_color: self.text_color
            line_color: self.text_color
            on_release:
                root.remove()




<AlarmsTab>:
    MDBoxLayout:
        orientation: 'vertical'
        # MyTopAppBar:
        #     id: top_app_bar
        #     md_bg_color: app.theme_cls.bg_normal
        #     text_color: app.theme_cls.bg_normal
        MDBoxLayout:
            size_hint_y: None
            height: dp(64)
        ScrollView:
            id: scroll_view
            on_scroll_start: root.scroll_movement(self.scroll_y)
            on_scroll_move: root.scroll_movement(self.scroll_y)
            on_scroll_stop: root.scroll_movement(self.scroll_y)
            # always_overscroll: False
            effect_cls: ScrollEffect
            scroll_type: ['bars', 'content']
            canvas.before:
                Color:
                    rgba: app.color_converter(app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '40')
                Rectangle:
                    size: self.size[0], self.size[1]/2
                    pos: self.x, self.top / 2
                Color:
                    rgba: app.color_converter(app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '25')
                Rectangle:
                    size: self.size[0], self.size[1]/2
                    pos: self.pos
                Color:
                    rgba: app.theme_cls.bg_normal  # whatever you do keep alpha as 1
                RoundedRectangle:
                    size: self.size
                    radius: dp(16),
                    pos: self.pos
            BoxLayout:
                padding: dp(15), dp(10), dp(15), dp(18)
                spacing: dp(20)
                size_hint_y: None
                orientation: 'vertical'
                id: container
                height: self.minimum_height
    # ToolBar:



<GoogleMapsTab>:
    canvas.before:
        Color:
            rgba: app.color_converter(app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '40')
        Rectangle:
            size: self.size[0], self.size[1]/2 - dp(64)  # Todo_: This code is differs from active_alarms tab and does
                                                            #    the same (it seems), but not tested tho
            pos: self.x, self.top / 2
        Color:
            rgba: app.color_converter(app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '25')
        Rectangle:
            size: self.size[0], self.size[1]/2
            pos: self.pos
        Color:
            rgba: app.theme_cls.bg_normal  # whatever you do keep alpha as 1
        RoundedRectangle:
            size: self.width, self.height - dp(64)
            radius: dp(16),
            pos: self.pos
    MDBoxLayout:
        orientation: 'vertical'
        MDBoxLayout:
            size_hint_y: None
            height: dp(64)
        MDBoxLayout:
            MDScrollView:
                effect_cls: ScrollEffect
                MDBoxLayout:
                    orientation: 'vertical'
                    size_hint_y: None
                    height: self.minimum_height
                    MDBoxLayout:
                        padding: '24dp'
                        spacing: '15dp'
                        orientation: 'vertical'
                        size_hint: 1, None
                        height: self.minimum_height
                        MyLabel:
                            id: co_ords
                            text: 'Getting co-ordinates...'
                        MyLabel:
                            id: location
                            text: 'Getting location...'
                        MyLabel:
                            id: speed
                            text: 'Getting speed...'
                        MyLabel:
                            id: heading
                            text: 'Getting heading...'
            TooltipMDIconButton:
                tooltip_text: 'Copy'
                icon: 'content-copy'
                pos_hint: {'right': 1, 'top': 1}
        MDBoxLayout:
            orientation: 'vertical'
            size_hint_y: None
            height: self.minimum_height
            spacing: '24dp'
            padding: 0, 0, 0, '25dp'
            MDRaisedButton:
                text: 'open "Google Maps"'
                pos_hint: {'center_x': 0.5}  # 'center_y': 0.5}
                on_release:
                    app.open_url('https://maps.google.com/')
                    # app.toast(fun=True, id_='5')
            MDRectangleFlatIconButton:
                icon: 'hand-heart'
                text: 'Support developer'
                pos_hint: {'center_x': 0.5}  # 'center_y': 0.7}
                on_release: app.toast('Thank you from bottom my heart but this is not working for now')





<HomeScreen>:
    BoxLayout:
        orientation: 'vertical'
        MDBottomNavigation:
            id: bottom_navigation
            # panel_color: 0.1, 0.1, 0.1, 0.8
            panel_color: app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '25'
            selected_color_background: app.theme_cls.colors[app.theme_cls.primary_palette]['900'] + '7f'
            text_color_active: "lightgrey"

            MDBottomNavigationItem:
                name: 'screen 1'
                text: 'Active alarms'
                icon: 'timer-marker-outline'
                on_tab_press:
                    root.tab_press(self)
                    alarm_tab.on__enter()

                AlarmsTab:
                    id: alarm_tab

            MDBottomNavigationItem:
                name: 'screen 2'
                text: 'Where am I?'
                icon: 'map-marker-radius'
                on_tab_press:
                    root.tab_press(self)
                    alarm_tab.on__leave()
                GoogleMapsTab:

            # MDBottomNavigationItem:
            #     name: 'screen 2'
            #     text: 'Google maps'
            #     icon: 'google-maps'
            #     on_tab_press:
            #         root.tab_press(self)

            #     GoogleMapsTab:

            # MDBottomNavigationItem:
            #     name: 'screen 3'
            #     text: 'Distance'
            #     icon: 'map-marker-distance'
            #     on_tab_press:
            #         root.tab_press(self)
            #     MDLabel:
            #         text: 'Distance'
            #         halign: 'center'
            #         on_touch_down:
            #             print(bottom_navigation.size[1])

    MDFloatingActionButton:
        id: spd_dial
        icon: 'plus'
        md_bg_color: app.theme_cls.colors[app.theme_cls.primary_palette]['900']
        pos_hint: {'right': 0.95, 'y': dp(100) / root.height}
        on_release: root.add_content()

        # _soft_shadow_size: self.soft_shadow_size
        # _soft_shadow_pos: self.soft_shadow_pos
        # _hard_shadow_texture: self.hard_shadow_texture
        # _hard_shadow_size: self.hard_shadow_size
        # _hard_shadow_pos: self.hard_shadow_pos

    ToolBar:
        id: top_app_bar



<SettingsScreen>:
    MDLabel:
        text: 'Settings are on the way, will arrive soon...'
        halign: 'center'





<SavedLocationsScreen>:
    MDBoxLayout:
        padding: dp(8)
        MDScrollView:
            MDBoxLayout:
                orientation: 'vertical'
                size_hint_y: None
                id: container
                height: self.minimum_height
                MDRectangleFlatIconButton:
                    icon: 'plus'
                    text: 'Add'
                    font_size: '32dp'
                    pos_hint: {'center_x': 0.5}
                    on_release: app.goto_screen('new_location')
    MDLabel:
        text: 'Saved locations will appear here'
        halign: 'center'



<AddNewLocationScreen>:
    MDBoxLayout:
        orientation: 'vertical'
        padding: '8dp'
        spacing: '18dp'
        MDBoxLayout:
            size_hint: 1, None
            height: self.minimum_height
            MDIconButton:
                icon: 'arrow-left'
                pos_hint: {'top': 1.2}
                on_press: app.escape_button()
            MDLabel:
                size_hint_y: None
                height: self.texture_size[1]
                text: 'Add reminder'
                font_style: 'H5'
                pos_hint: {'top': 0.98}
                valign: 'top'
        ScrollView:
            MDBoxLayout:
                orientation: 'vertical'
                size_hint_y: None
                height: self.minimum_height
                spacing: '24dp'
                padding: '10dp'
                MDBoxLayout:
                    size_hint_y: None
                    height: self.minimum_height
                    spacing: dp(10)
                    MDTextField:
                        hint_text: 'GPS co-ords'
                        id: cords_in
                        on_focus: root.validate_gps_cords()
                        on_focus: root.location_input()
                        on_text: root.location_input()
                        helper_text: 'Invalid GPS co-ordinates'
                        helper_text_mode: 'on_error'
                        # max_text_length: 30
                    TooltipMDIconButton:
                        text: 'Paste'
                        tooltip_text: 'Paste from clipboard'
                        icon: 'content-paste'
                        pos_hint: {'right': 1}
                        on_release:
                            cords_in.text = Clipboard.paste()
                            root.validate_gps_cords()
                    TooltipMDIconButton:
                        icon: 'map-marker'
                        tooltip_text: 'Current GPS location'
                        pos_hint: {'right': 1}
                        on_release:
                            cords_in.text = "This feature is still in development"
                            root.validate_gps_cords()
                MDBoxLayout:
                    size_hint_y: None
                    height: self.minimum_height
                    spacing: dp(10)
                    padding: 0, 0, 0, dp(32)
                    MDTextField:
                        id: location_name
                        hint_text: 'Full address'
                        # on_focus: root.reset_text_field_error_stat()
                        on_text: root.location_input()
                        helper_text_mode: 'on_error'
                    LagRectangleFlatButton:
                        id: get_button
                        pos_hint: {'center_y':0.5}
                        text: 'Get address'
                        is_reverse: True
                        lag_function: root.get_location_info
                EssentialContent:
                    id: ess_content
                    spacing: dp(32)
                MDBoxLayout:
                    size_hint_y: None
                    height: self.minimum_height
                    padding: 0, '16dp', 0, '16dp'
                    MDTextButton:
                        text: 'Song.mp3'
                        on_release: app.toast(fun=True, id_='7')
                MDRectangleFlatIconButton:
                    text: 'Add'
                    icon: 'plus'
                    pos_hint: {'center_x': 0.5}
                    on_release: root.open_short_address_dialog()



<FirstInfoScreen>:
    MDScreen:
        ScrollView:
            BoxLayout:
                size_hint_y: None
                height: self.minimum_height
                orientation: 'vertical'
                padding: dp(32)
                MyLabel:
                    text: 'Terms and Conditions'
                    font_style: 'H4'
                    halign: 'center'
                MyLabel:
                    halign: 'center'
                    text: 'Last updated February 22, 2024\n\n'
                MDBoxLayout:
                    orientation: 'vertical'
                    size_hint_y: None
                    height: self.minimum_height
                    spacing: dp(32)
                    MyLabel:
                        text: '• Before starting:'
                        font_style: 'H5'
                        halign: 'left'
                    MyLabel:
                        pos_hint: {'center_x': 0.55}
                        size_hint_x: 0.92
                        markup: True
                        text: "This app is under development and not a completed product so, you may experience frequent crashes, glitches or bugs. Don't worry!, with your feedback these can be fixed, So please consider giving feedback."
                    MyLabel:
                        text: '• Data Usage and OpenStreetMap:'
                        font_style: 'H5'
                        halign: 'left'
                    MyLabel:
                        pos_hint: {'center_x': 0.55}
                        size_hint_x: 0.92
                        markup: True
                        text: "We respect your privacy, our app (Location alarm) uses the [b]OpenStreetMap (OSM)[/b] service for geocoding and reverse-geocoding.  This means that when you enter [b]GPS coordinates (latitude and longitude)[/b] into the App, those coordinates are sent to OSM to convert them into a human-readable address (reverse-geocoding) or to find coordinates for a given address (geocoding). This is the only data transmitted from the app. We DO NOT collect or store these coordinates or the results of the geocoding/reverse-geocoding process on our servers."
                    MyLabel:
                        pos_hint: {'center_x': 0.55}
                        size_hint_x: 0.92
                        markup: True
                        text: "OSM is a third-party service, and its own terms and privacy policy will govern its use of the data you provide. We strongly encourage you to review the OpenStreetMap [ref=https://osmfoundation.org/wiki/Terms_of_Use][u][color=4287f5]Terms of Use[/color][/u][/ref] and [ref=https://osmfoundation.org/wiki/Privacy_Policy][u][color=4287f5]Privacy Policy[/color][/u][/ref]. We are not responsible for the data practices of OpenStreetMap beyond the transmission of the coordinates you enter for the purpose of using the OSM geocoding/reverse-geocoding service."
                        on_ref_press:
                            root.hyper_link_press(args)
                    MyLabel:
                        text: '• About service provider (OSM):'
                        font_style: 'H6'
                        size_hint_x: 0.92
                        halign: 'left'
                        pos_hint: {'center_x': 0.55}
                    MyLabel:
                        size_hint_x: 0.8
                        pos_hint: {'center_x': 0.58}
                        markup: True
                        text: "OpenStreetMap is a free, editable map of the whole world that is being built by volunteers largely from scratch and released with an open-content license.\n[ref=https://www.openstreetmap.org/copyright][u][color=4287f5]The OpenStreetMap License[/color][/u][/ref] allows free (or almost free) access to OSM\'s map images and all of OSM\'s underlying map data. The project aims to promote new and interesting uses of the data. For more details about \"why we use OpenStreetMap (OSM)\" and why not google, click [ref=https://wiki.openstreetmap.org/wiki/FAQ#Why_OpenStreetMap?][color=4287f5][u]here[/u][/color]. If want to know more about our service provider which is OpenStreetMap (OSM) click [ref=https://wiki.openstreetmap.org/wiki/About_OpenStreetMap][color=4287f5][u]here[/u][/color]"
                        on_ref_press:
                            root.hyper_link_press(args)
                    MyLabel:
                        text: '• Other data usage'
                        font_style: 'H6'
                        size_hint_x: 0.92
                        halign: 'left'
                        pos_hint: {'center_x': 0.55}
                    MyLabel:
                        size_hint_x: 0.8
                        pos_hint: {'center_x': 0.58}
                        markup: True
                        text: "Beyond the transmission of user-entered GPS coordinates to OSM for geocoding/reverse-geocoding as described in above section, Location Alarm does not collect any other personal data from you. We do not track your location outside of the coordinates you explicitly provide for geocoding/reverse-geocoding, your usage patterns within the app, or any other information that could be used to identify you."
                    MyLabel:
                        text: '• Permitted Use:'
                        font_style: 'H5'
                        halign: 'left'
                    MyLabel:
                        pos_hint: {'center_x': 0.55}
                        size_hint_x: 0.92
                        text: "You may use the App solely for its intended purpose, You agree not to use the App for any unlawful or prohibited purpose."
                    MyLabel:
                        text: '• Disclaimer of Warranties:'
                        font_style: 'H5'
                        halign: 'left'
                    MyLabel:
                        pos_hint: {'center_x': 0.55}
                        size_hint_x: 0.92
                        text: "The App is provided \"as is\" and \"as available\" without any warranties of any kind, either express or implied. We do not warrant that the App will be error-free, uninterrupted, or that any defects will be corrected. We disclaim all warranties of merchantability, fitness for a particular purpose, and non-infringement. Specifically, we make no warranties regarding the accuracy, completeness, or reliability of the geocoding/reverse-geocoding results provided by OpenStreetMap."

                    MyLabel:
                        text: '• Limitation of Liability:'
                        font_style: 'H5'
                        halign: 'left'
                    MyLabel:
                        pos_hint: {'center_x': 0.55}
                        size_hint_x: 0.92
                        text: "To the maximum extent permitted by applicable law, we shall not be liable for any indirect, incidental, special, consequential, or punitive damages, or any loss of profits or revenues, whether incurred directly or indirectly, arising out of your access to or use of the App, even if we have been advised of the possibility of such damages."
                    MyLabel:
                        text: '• Message from developer:'
                        font_style: 'H5'
                        halign: 'left'
                    MyLabel:
                        pos_hint: {'center_x': 0.55}
                        size_hint_x: 0.92
                        text: "Thank you for installing this app. Remember you are \'alpha\' tester for this app, currently NOTHING works at all, you have to look at UI/UX (User Interface -> how ease it is to us this app and how it visually appealing look wise) and give feedback is there any changes needed or any new additions/features required,  Your opinion matters, I love to hear your feedback. See you in the feedback section, Happy hunting bugs ;)"
                        # text: '\n      Downloading the copyrighted video/audio is illegal we were not responsible for your downloads!. Download at your risk\n'
                    MyLabel:
                        text: '• Note:'
                        font_style: 'H5'
                        halign: 'left'
                    MyLabel:
                        pos_hint: {'center_x': 0.55}
                        size_hint_x: 0.92
                        text: "By using the App, you acknowledge that you have read, understood, and agree to be bound by these Terms and Conditions."
                    MyLabel:
                        font_style: 'Caption'
                        text: '*By pressing Continue you agreeing to the above conditions'
                        halign: 'center'


                MDRaisedButton:
                    text: 'Continue'
                    on_release: root.agree()
                    pos_hint: {'center_x': 0.5}
                    size_hint: 0.6, None


<LoadingScreen>:
    FloatLayout:
        MDSpinner:
            size_hint: None, None
            size: dp(80), dp(80)
            pos_hint: {'center_x': 0.5, 'center_y': 0.5}
        MyLabel:
            id: label
            halign: 'center'
            pos_hint: {'top': 0.5 - (dp(50) / root.height), 'center_x': 0.5}



<PasswordInputScreen>:
    canvas.before:
        Color:
            rgba: 0.1, 0.1, 0.1, 0.2
        Rectangle:
            size: self.size
            pos: self.pos
    MyLabel:
        text: 'Enter new password'
        font_size: dp(32)
        pos_hint: {'top': 0.9}
        halign: 'center'

    MDTextField:
        id: password
        size_hint: 0.8, None
        icon_left: 'key'
        pos_hint: {'center_x': 0.5, 'center_y': 0.65}
        hint_text: 'Enter password'
        mode: 'rectangle'
        max_text_length: 16
        on_focus:
            help.icon_color = self.line_color_focus if self.focus else self.line_color_normal
        on_text:
            root.key_stroke(self, confirm_password, self.text)
            proceed.disabled = False if 4 <= len(self.text) <= 16 and self.text == confirm_password.text else True


    MDIconButton:
        id: help
        icon: "help-circle-outline"
        pos_hint: {"center_y": .65}
        pos: password.right - self.width + dp(8), 0
        theme_text_color: 'Custom'
        icon_color: password.line_color_normal
        on_release: root.open_info_dialog()

    MDTextField:
        id: confirm_password
        size_hint: 0.8, None
        icon_left: 'key'
        pos_hint: {'center_x': 0.5, 'center_y': 0.5}
        hint_text: 'Confirm Password'
        password: True
        mode: 'rectangle'
        on_focus:
            eye.icon_color = self.line_color_focus if self.focus else self.line_color_normal
        on_text:
            root.key_stroke(self, password, self.text)
            proceed.disabled = False if 4 <= len(self.text) <= 16 and self.text == password.text else True

    MDIconButton:
        id: eye
        icon: "eye"
        pos_hint: {"center_y": .5}
        pos: confirm_password.right - self.width + dp(8), 0
        theme_text_color: 'Custom'
        icon_color: confirm_password.line_color_normal
        on_release:
            self.icon = "eye" if self.icon == "eye-off" else "eye-off"
            confirm_password.password = False if confirm_password.password is True else True

    MDBoxLayout:
        size_hint: 1, None
        height: self.minimum_height
        pos_hint: {'x': confirm_password.x / root.width, 'top': (confirm_password.y - dp(20)) / root.height}
        MDCheckbox:
            id: check_box
            active: True
            inactive_color: app.theme_cls.primary_color
            size_hint: None, None
            size: dp(24), dp(24)
            pos_hint: {'center_x': 0.5}

        MDTextButton:
            text: 'Remember me'
            on_release:
                check_box.active = not check_box.active

    MDFillRoundFlatIconButton:
        id: proceed
        disabled: True
        text: 'Continue'
        icon: 'arrow-right'
        pos_hint: {'center_x': 0.5, 'y': 0.1}
        on_release:
            root.proceed()

    MDTextButton:
        pos_hint: {'right': 0.96}
        on_release:
            root.check_data_file()
        pos: self.x, dp(10)
        markup: True
        text: '[color=3333ff][u]Recover data[/u][/color]'



<PasswordLoginScreen>:
    canvas.before:
        Color:
            rgba: 0.1, 0.1, 0.1, 0.2
        Rectangle:
            size: self.size
            pos: self.pos
    MyLabel:
        text: 'Enter your password'
        font_size: dp(32)
        pos_hint: {'top': 0.9}
        halign: 'center'

    MDTextField:
        id: password
        size_hint: 0.8, None
        icon_left: 'key'
        pos_hint: {'center_x': 0.5, 'center_y': 0.65}
        hint_text: 'Enter password'
        mode: 'rectangle'
        max_text_length: 16
        on_focus:
            help.icon_color = self.line_color_focus if self.focus else self.line_color_normal
        on_text:
            proceed.disabled = not root.is_pass_valid()

    MDBoxLayout:
        size_hint: 1, None
        height: self.minimum_height
        pos_hint: {'x': password.x / root.width, 'top': (password.y - dp(20)) / root.height}
        MDCheckbox:
            id: check_box
            active: False
            inactive_color: app.theme_cls.primary_color
            size_hint: None, None
            size: dp(24), dp(24)
            pos_hint: {'center_x': 0.5}

        MDTextButton:
            text: 'Remember me'
            halign: 'left'
            on_release:
                check_box.active = not check_box.active

    MDFillRoundFlatIconButton:
        id: proceed
        disabled: True
        text: 'Continue'
        icon: 'arrow-right'
        pos_hint: {'center_x': 0.5, 'y': 0.1}
        on_release:
            root.enter_button()

    MDTextButton:
        pos_hint: {'right': 0.96}
        on_release:
            root.forgot_password()
        pos: self.x, dp(10)
        markup: True
        text: '[color=3333ff][u]Forgot password[/u][/color]'
